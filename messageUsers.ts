const fs = require("fs");
const { IgApiClient } = require("instagram-private-api");
const config = require("./config.json");

// read users from json file generated by python
let rawData = fs.readFileSync("users.json");
let users = JSON.parse(rawData);

rawData = fs.readFileSync("messagedUsers.json");
let messagedUsers = [];
try {
    messagedUsers = JSON.parse(rawData);
} catch (error) {
    console.error("No users messaged yet. This error can be ignored")
}

let newUsers = users.filter((user) => messagedUsers.indexOf(user) == -1) // Only add Users to array if they arent alread in "messagedUsers"
newUsers = [...new Set(newUsers)]; // remove duplicates

// Array with all user (messaged & will be messaged). No Duplicates
let combinedUsers = messagedUsers.concat(newUsers);
combinedUsers = [...new Set(combinedUsers)];

// prep instagram
const ig = new IgApiClient();
ig.state.generateDevice(config.InstaUser);

(async () => {
    // Login with instagram user
    await ig.simulate.preLoginFlow();
    const loggedInUser = await ig.account.login(config.InstaUser, config.InstaPassword);
    process.nextTick(async () => await ig.simulate.postLoginFlow());

    // send messages
    message(newUsers);
    fs.writeFileSync("messagedUsers.json", JSON.stringify(combinedUsers));
})();

// Custom timer for wait during iteration
const timer = ms => new Promise(res => setTimeout(res, ms));

// Message all the users given in the "users" array
async function message(users) {    
    for(const user of users) {
        console.log(`\nTrying to message user "${user}"`);
        let userID = 0;

        // try finding userID
        try {
            userID = await ig.user.getIdByUsername(user);
            console.log(`Found user with userID ${userID}`);
        } catch (error) {
            console.error(`"${user}" was not found. You may be blocked by this user.`)
        }       

        // create message thread
        const thread = ig.entity.directThread([userID.toString()]);

        // try sending messages
        try {
            await thread.broadcastText(config.Message);
            console.log(`Successfully sent message to "${user}`);
        } catch (error) {
            console.error(`Message could not be sent to "${user}". Will still be added to messagedUsers. Please contact manually or ignore.`)
        }

        // Delay before next execution
        await timer(config.MessageDelay);
    }
}